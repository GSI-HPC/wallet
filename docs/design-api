                            Wallet Server API

Introduction

    Here is the specification for the API that components of the wallet
    server will implement.  This is the document you should read if you're
    planning on extending the wallet system.  There are two pluggable
    components in the wallet server: the implementation of a particular
    object type (which amounts mostly to storage and retrieval), and the
    ACL implementation.

    See the documentation for Wallet::Object::Base and Wallet::ACL::Base,
    which contain additional information about creating new object and
    ACL verifier implementations and the documentation for all generic
    methods.

Object API

  new(NAME, TYPE, DBH)

    Creates a new object with the given object name and type based on data
    already in the database.  Takes a database handle, which should be
    stored with the object and used for any further operations.  This
    method should inherit from the generic Wallet::Object::Base object,
    which implements the following methods:

        new(NAME, DBH)
        create(NAME, DBH)
        owner([ACL-ID, PRINCIPAL, HOSTNAME [, DATETIME]])
        acl(TYPE [, ACL-ID, PRINCIPAL, HOSTNAME [, DATETIME]])
        expires([DATETIME, PRINCIPAL, HOSTNAME [, DATETIME]])
        store(DATA, PRINCIPAL, HOSTNAME [, DATETIME])
        show()
        destroy(PRINCIPAL, HOSTNAME [, DATETIME])
        error()

    that manipulate the basic object data.  Generally all this function
    needs to do is call the parent new() constructor.  If the object
    couldn't be found, throws an exception.  (Just returning undef would
    provide no way of communicating the error message.)

  create(NAME, TYPE, DBH, PRINCIPAL, HOSTNAME [, DATETIME])

    Like new(), but instead creates a new entry in the database with the
    given name.  As with new(), the generic function will normally do all
    of the work.  Takes some additional information to put into the
    created fields in the database.  If the object already exists or
    creating it fails, throws an exception.  (Just returning undef would
    provide no way of communicating the error message.)

  destroy(PRINCIPAL, HOSTNAME [, DATETIME])

    Destroys the given object.  This should include destroying any
    representation of the object in other systems as well (such as
    deleting Kerberos principals out of a KDC).  Takes the information
    about who is doing the deletion to store log entries.  The result is
    true on success and false on failure.  On error, the caller should
    call error() to get the error text.

  get(PRINCIPAL, HOSTNAME [, DATETIME])

    Applied to a returned object, retrieves the data contained in the
    object in question.  Takes the information about who is doing the
    retrieval so that the database metadata can be updated.  The result is
    either the relevant data or undef in the event of an error.  On error,
    the caller should call error() to get the error text.

  store(DATA, PRINCIPAL, HOSTNAME [, DATETIME])

    Store user-supplied data into the given object.  This may not be
    supported by all backends (for instance, backends that automatically
    generate the data will not support this).  Takes the information about
    who is doing the store so that the database metadata can be updated.
    The result is true on success and false on failure.  On error, the
    caller should call error() to get the error text.

  show()

    Returns a formatted text description of the object suitable for human
    display, or undef on error.  On error, the caller should call error()
    to get the error text.

  error()

    Returns the error text from the last failed call.

ACL Verifier API

  new()

    Creates a persistant ACL verifier for the given ACL type.  This may do
    nothing, but some ACL verifiers require some persistant data, like a
    persistant LDAP connection.

  check(PRINCIPAL, ACL)

    Checks whether the given PRINCIPAL should be allowed access given ACL.
    Returns 1 if access is granted, 0 if access is declined, and undef on
    error.  On error, the caller should call error() to get the error text
    but generally should continue with checking other ACLs.

  error()

    Returns the error text of the last error.
